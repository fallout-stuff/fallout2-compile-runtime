name: Build Fallout2 Runtime

on:
  push:
    tags:
      - 'v*'
      - '*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        # Remove existing directories if they exist
        rm -rf ./headers
        rm -rf ./scripts
        rm -rf ./bin

    - name: Download and extract Watcom ISO
      run: |
        echo "Downloading Watcom CPP 11.0 ISO..."
        curl -L -o watcom.7z "https://dl-alt1.winworldpc.com/Watcom%20CPP%2011.0%20B%20(CD).7z"

        echo "Extracting 7z archive..."
        7z x watcom.7z -o./watcom_extract

        echo "Finding ISO file..."
        ISO_FILE=$(find ./watcom_extract -name "*.iso" | head -1)

        if [ -n "$ISO_FILE" ]; then
          echo "Found ISO: $ISO_FILE"
          echo "Mounting ISO and extracting files..."

          # Create mount point
          mkdir -p ./iso_mount

          # Mount ISO (using 7z to extract ISO contents)
          7z x "$ISO_FILE" -o./iso_mount

          # Extract specific files to bin directory
          mkdir -p ./bin
          if [ -f "./iso_mount/binnt/wcc386.exe" ]; then
            cp ./iso_mount/binnt/wcc386.exe ./bin/
            echo "Extracted wcc386.exe"
          else
            echo "wcc386.exe not found in ISO"
          fi

          if [ -f "./iso_mount/binnt/wccd386.dll" ]; then
            cp ./iso_mount/binnt/wccd386.dll ./bin/
            echo "Extracted wccd386.dll"
          else
            echo "wccd386.dll not found in ISO"
          fi

          ls -la ./bin/
        else
          echo "No ISO file found in archive"
          exit 1
        fi

    - name: Cache Fallout2 Restoration Project
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/fallout2-restoration.zip
        key: fallout2-restoration-${{ hashFiles('**/fallout2-runtime-binaries.zip') }}
        restore-keys: |
          fallout2-restoration-

    - name: Cache sfall
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/sfall.zip
        key: sfall-${{ hashFiles('**/fallout2-runtime-binaries.zip') }}
        restore-keys: |
          sfall-



    - name: Download Fallout2 Restoration Project
      run: |
        mkdir -p ~/.cache
        if [ -f "~/.cache/fallout2-restoration.zip" ]; then
          echo "Using cached Fallout2 Restoration Project"
          cp ~/.cache/fallout2-restoration.zip ./fallout2-restoration.zip
        else
          echo "Downloading Fallout2 Restoration Project"
          curl -L -o fallout2-restoration.zip https://github.com/BGforgeNet/Fallout2_Restoration_Project/archive/refs/heads/master.zip
          cp fallout2-restoration.zip ~/.cache/fallout2-restoration.zip
        fi
        unzip -q fallout2-restoration.zip
        mv Fallout2_Restoration_Project-master Fallout2_Restoration_Project

    - name: Move headers and scripts
      run: |
        mv Fallout2_Restoration_Project/scripts_src/headers ./headers
        mv Fallout2_Restoration_Project/scripts_src ./scripts

    - name: Download sfall
      run: |
        mkdir -p ~/.cache
        if [ -f "~/.cache/sfall.zip" ]; then
          echo "Using cached sfall"
          cp ~/.cache/sfall.zip ./sfall.zip
        else
          echo "Downloading sfall"
          curl -L -o sfall.zip https://github.com/sfall-team/sfall/archive/refs/heads/master.zip
          cp sfall.zip ~/.cache/sfall.zip
        fi
        unzip -q sfall.zip
        mv sfall-master sfall

    - name: Move sfall headers
      run: |
        mv sfall/artifacts/scripting/headers ./headers/sfall

    - name: Clean up cloned repositories
      run: |
        rm -rf Fallout2_Restoration_Project
        rm -rf sfall



    - name: List final structure
      run: |
        echo "Final project structure:"
        find . -type f -name "*.h" | head -10
        find . -type f -name "*.ssl" | head -10
        ls -la ./bin/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fallout2-runtime
        path: |
          headers/
          scripts/
          bin/

    - name: Get tag info
      id: get_tag
      run: |
        # Get the current tag that triggered this workflow
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        # Remove 'v' prefix if it exists
        VERSION=${CURRENT_TAG#v}

        echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using tag: $CURRENT_TAG"
        echo "Version: $VERSION"

    - name: Create release zip
      run: |
        # Create a zip file with the specific naming format
        zip -r fallout2-compile-runtime-${{ steps.get_tag.outputs.version }}.zip headers/ scripts/ bin/
        echo "Created: fallout2-compile-runtime-${{ steps.get_tag.outputs.version }}.zip"

    - name: Create release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create a new release with the current tag
        gh release create ${{ steps.get_tag.outputs.current_tag }} \
          --title "Fallout2 Script Compile Runtime ${{ steps.get_tag.outputs.version }}" \
          --notes "Automated release of Fallout2 runtime with headers, scripts, and Watcom compiler binaries." \
          fallout2-compile-runtime-${{ steps.get_tag.outputs.version }}.zip
