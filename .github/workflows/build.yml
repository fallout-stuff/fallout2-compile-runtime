name: Build Fallout2 Runtime

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        # Remove existing directories if they exist
        rm -rf ./headers
        rm -rf ./scripts
        rm -rf ./bin



    - name: Download Fallout2 Restoration Project
      run: |
        echo "Downloading Fallout2 Restoration Project"
        curl -L -o fallout2-restoration.zip https://github.com/BGforgeNet/Fallout2_Restoration_Project/archive/refs/heads/master.zip
        unzip -q fallout2-restoration.zip
        mv Fallout2_Restoration_Project-master Fallout2_Restoration_Project

    - name: Move headers and scripts
      run: |
        mv Fallout2_Restoration_Project/scripts_src/headers ./headers
        mv Fallout2_Restoration_Project/scripts_src ./scripts

    - name: Download sfall
      run: |
        echo "Downloading sfall"
        curl -L -o sfall.zip https://github.com/sfall-team/sfall/archive/refs/heads/master.zip
        unzip -q sfall.zip
        mv sfall-master sfall

    - name: Move sfall headers
      run: |
        mv sfall/artifacts/scripting/headers ./headers/sfall

    - name: Clean up cloned repositories
      run: |
        rm -rf Fallout2_Restoration_Project
        rm -rf sfall

    - name: Create bin directory and extract binaries
      run: |
        mkdir -p ./bin
        unzip fallout2-runtime-binaries.zip -d ./bin/

    - name: List final structure
      run: |
        echo "Final project structure:"
        find . -type f -name "*.h" | head -10
        find . -type f -name "*.ssl" | head -10
        ls -la ./bin/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fallout2-runtime
        path: |
          headers/
          scripts/
          bin/

    - name: Get latest tag and check if it matches current commit
      id: get_tag
      run: |
        # Get the latest tag sorted by version
        LATEST_TAG=$(git tag --list | sort -V | tail -1 || echo "0.1.0")
        # Remove 'v' prefix if it exists
        VERSION=${LATEST_TAG#v}
        # Check if the latest tag points to the current commit
        TAG_COMMIT=$(git rev-list -n 1 $LATEST_TAG 2>/dev/null || echo "")
        CURRENT_COMMIT=$(git rev-parse HEAD)
        TAG_MATCHES_COMMIT=false

        if [ "$TAG_COMMIT" = "$CURRENT_COMMIT" ]; then
          TAG_MATCHES_COMMIT=true
        fi

        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_matches_commit=$TAG_MATCHES_COMMIT" >> $GITHUB_OUTPUT
        echo "Using tag: $LATEST_TAG"
        echo "Version: $VERSION"
        echo "Tag matches current commit: $TAG_MATCHES_COMMIT"

    - name: Create release zip
      if: steps.get_tag.outputs.tag_matches_commit == 'true' && github.event_name == 'push'
      run: |
        # Create a zip file with the specific naming format
        zip -r fallout2-compile-runtime-${{ steps.get_tag.outputs.version }}.zip headers/ scripts/ bin/
        echo "Created: fallout2-compile-runtime-${{ steps.get_tag.outputs.version }}.zip"

    - name: Create release
      if: steps.get_tag.outputs.tag_matches_commit == 'true' && github.event_name == 'push'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create a new release with the latest tag
        gh release create ${{ steps.get_tag.outputs.latest_tag }} \
          --title "Fallout2 Runtime ${{ steps.get_tag.outputs.version }}" \
          --notes "Automated release of Fallout2 runtime with headers, scripts, and binaries." \
          fallout2-compile-runtime-${{ steps.get_tag.outputs.version }}.zip
